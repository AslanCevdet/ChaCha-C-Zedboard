#include "chacha20.h"


ChaCha20::ChaCha20(){

	for (int i = 0; i < 16; ++i)
	{
	  state[i] = 0;
	}

	// The constants from the ChaCha20 specification.
	state[0] = 0x61707865;
	state[1] = 0x3320646e;
	state[2] = 0x79622d32;
	state[3] = 0x6b206574;

};

void ChaCha20::keySetup(const uint32_t* key, const uint32_t* nonce, uint32_t counter){

	for (int i = 0; i < 8; ++i) {
	        state[i + 4] = bigEndianToLittleEndian(key[i]);
	    }

	state[12] = counter;

	for (int i = 0; i < 3; ++i) {
	        state[i + 13] = bigEndianToLittleEndian(nonce[i]);
	    }


};

void ChaCha20::quarterRound(int ai, int bi, int ci, int di, uint32_t* block){

		uint32_t &a = block[ai], &b = block[bi], &c = block[ci], &d = block[di];

		a += b; d ^= a; d = (d << 16) | (d >> (32 - 16));
		c += d; b ^= c; b = (b << 12) | (b >> (32 - 12));
		a += b; d ^= a; d = (d << 8) | (d >> (32 - 8));
		c += d; b ^= c; b = (b << 7) | (b >> (32 - 7));
};


void ChaCha20::tenRoundsAndFinalAddition(uint32_t* block){

	uint32_t initial_state[16];

	for(int i = 0 ; i<16 ; i++){
		initial_state[i] = block[i];
	}


	for(int i = 0; i<10;i++){

	quarterRound(0, 4,  8, 12, block);
	quarterRound(1, 5,  9, 13, block);
	quarterRound(2, 6, 10, 14, block);
	quarterRound(3, 7, 11, 15, block);
	quarterRound(0, 5, 10, 15, block);
	quarterRound(1, 6, 11, 12, block);
	quarterRound(2, 7,  8, 13, block);
	quarterRound(3, 4,  9, 14, block);

	}

	for(int i = 0 ; i<16 ; i++){
			block[i] += initial_state[i];
		}

};



void ChaCha20::blockCreation(){

	for(int i=0; i<16; i++){
		block1[i] = state[i];

	} //1. block oluþturma

	tenRoundsAndFinalAddition(block1);

	for(int i=0; i<16; i++){
			block2[i] = state[i];

		}
	block2[12] += 1;

	tenRoundsAndFinalAddition(block2);

	//2 tane block oluþtur. 1. için counter 1, diðeri için 2


}

void ChaCha20::keyStreamGeneration(){

	for (int i = 0; i < 16; i++){
			for (int j = 0; j < 4; ++j) {
			            keystream1[i*4 + j] = (block1[i] >> (8 * j)) & 0xff;
			        }
		}

	for (int i = 0; i < 16; i++){
				for (int j = 0; j < 4; ++j) {
				            keystream2[i*4 + j] = (block2[i] >> (8 * j)) & 0xff;
				        }
			}


}

void ChaCha20::encrypt(uint8_t* plain_text,size_t len){

	keyStreamGeneration();

	for (size_t i = 0; i < 64; ++i) {
	        plain_text[i] ^= keystream1[i];
	    }

	if(len > 64){
		for (size_t i = 64; i < len; ++i) {
					plain_text[i] ^= keystream2[i];
				}
	}

};

void ChaCha20::decrypt(uint8_t* cypher_text, size_t len){


		for (size_t i = 0; i < 64; ++i) {
		        cypher_text[i] ^= keystream1[i];

		    } //block1

		if(len > 64){
			for (size_t i = 64; i < len; ++i) {
							cypher_text[i] ^= keystream2[i];

						} //block2
		}
};


uint32_t ChaCha20::bigEndianToLittleEndian(uint32_t bigEndianValue) {

		uint32_t byte0 = (bigEndianValue & 0x000000ff) << 24;
	    uint32_t byte1 = (bigEndianValue & 0x0000ff00) << 8;
	    uint32_t byte2 = (bigEndianValue & 0x00ff0000) >> 8;
	    uint32_t byte3 = (bigEndianValue & 0xff000000) >> 24;

	    return byte0 | byte1 | byte2 | byte3;

}

uint32_t ChaCha20::littleEndianToBigEndian(uint32_t littleEndianValue){

		uint32_t byte0 = (littleEndianValue & 0xff000000) >> 24;
	    uint32_t byte1 = (littleEndianValue & 0x00ff0000) >> 8;
	    uint32_t byte2 = (littleEndianValue & 0x0000ff00) << 8;
	    uint32_t byte3 = (littleEndianValue & 0x000000ff) << 24;

	    return byte0 | byte1 | byte2 | byte3;

}

void ChaCha20::convertSentenceToBytes(const std::string &sentence, uint8_t *bytes, int &numBytes){

	 	numBytes = 0;
	    for (char c : sentence) {
	        bytes[numBytes++] = static_cast<uint8_t>(c);
	    }

}

void ChaCha20::convertBytesToCharString(uint8_t* bytes, int numBytes){

	 for (int i = 0; i < numBytes; ++i) {
	        bytes[i] = static_cast<char>(bytes[i]);
	    }
	    bytes[numBytes] = '\0';  // Null-terminate the string

}


void ChaCha20::printEncrypted(uint8_t* cipher_text, int len){

	xil_printf("Encrypted Text: \r\n");
	for (int i = 0; i<len; i++){

			xil_printf("%02x", static_cast<int>(cipher_text[i]));
			if(i<len-1){
				xil_printf(":");
			}

	}
		xil_printf("\r\n");

};

void ChaCha20::printDecrypted(uint8_t* plain_text, int len){

	xil_printf("Decrypted Text: \r\n");

		for (int i = 0; i<len; i++){

				xil_printf("%c", static_cast<char>(plain_text[i]));

		}
			xil_printf("\r\n");

}


void ChaCha20::scan(char* buffer, uint32_t max_size){

	uint8_t received_byte;
	uint32_t index = 0;

	while(index < max_size - 1){

		if(XUartPs_IsReceiveData(Uart_PS.Config.BaseAddress)){
			received_byte = XUartPs_ReadReg(Uart_PS.Config.BaseAddress, XUARTPS_FIFO_OFFSET);
			if (received_byte == '\n' || received_byte == '\r')
			            {
			                break;
			            }
			            buffer[index++] = received_byte;
			        }
			    }
			    buffer[index] = '\0'; // null-terminate the string

	}

